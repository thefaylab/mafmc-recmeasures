      SUBROUTINE MINIM(F,STEP,NOP,FUNC,MAX,IPRINT,STOPCR,NLOOP,IQUAD,SIMP,VAR,FUNCTN,IW,IFAULT)
!
!   A PROGRAM FOR FUNCTION MINIMISATION USING THE SIMPLEX METHOD.
!
!   FOR DETAILS, SEE NELDER & MEAD, THE COMPUTER JOURNAL,JANUARY, 1965
!
!***  PROGRAMMED BY D.E.SHAW
!***  CSIRO, DIVISION OF MATHEMATICS AND STATISTICS,
!***  P.O.BOX 218, LINDFIELD.    2070
!
!***  AMENDED BY R.W.M.WEDDERBURN
!***  ROTHAMSTED EXPERIMENTAL STATION
!***  HARPENDEN, HERTFORDSHIRE, ENGLAND.
!
!   THE PARAMETER LIST IS AS FOLLOWS -
!   F         ON ENTRY, THE STARTING VALUES OF THE PARAMETERS
!             ON EXIT, THE PARAMETER VALUES SPECIFYING THE MINIMUM
!   STEP      THE INITIAL STEP SIZES
!   NOP       THE NUMBER OF PARAMETERS(INCLUDING THOSE HELD FIXED)
!   FUNC      ON EXIT, THE FUNCTION VALUE AT THE MINIMUM
!   MAX       THE MAXIMUM NUMBER OF FUNCTION EVALUATIONS TO BE ALLOWED
!   IPRINT    PARAMETER TO CONTROL OUTPUT FROM MINIM
!             LESS THAN 0   NO OUTPUT
!             EQUAL TO 0    REPORTS OF INITIAL EVIDENCE OF CONVERGENCE,
!                           FINAL CONVERGENCE ,WITH PARAMETER AND
!                           FUNCTION VALUES THERE), OVERRUNNING OF MAX,
!                           AND THE FITTING OF THE QUADRATIC SURFACE IF
!                            CALLED FOR.
!             GREATER THAN 0 AS FOR IPRINT = 0, PLUS A PROGRESS REPORT
!                            ON THE MINIMISATION EVERY IPRINT FUNCTION
!                            EVALUATIONS.
!   STOPCR    STOPPING CRITERION
!   NLOOP     CONVERGENCE IS TESTED FOR EVERY NLOOP TIMES THE PROCESS
!             CHANGES THE SIMPLEX. AFTER INITIAL CONVERGENCE, NLOOP
!             FURTHER CHANGES ARE ALLOWED BEFORE TESTING FOR FINAL
!             CONVERGENCE
!   IQUAD     =1  IF FITTING OF QUADRATIC SURFACE REQUIRED
!             =0  IF NOT
!   SIMP      CRITERION FOR EXPANDING SIMPLEX TO OVERCOME ROUNDING
!             ERRORS BEFORE FITTING QUADRATIC SURFACE
!   VAR       ON EXIT, CONTAINS THE DIAGONAL ELEMENTS OF THE INVERSE OF
!             THE INFORMATION MATRIX
!   FUNCTN    A SUBROUTINE FUNCTN(F,FUNC) WHICH GIVEN AN ARRAY F OF
!             PARAMETER VALUES RETURNS THE FUNCTION VALUE FUNC
!   IFAULT    ON EXIT -
!                  IFAULT=1 IF NO. OF FUNCTION EVALUATIONS EXCEEDS MAX,
!                  IFAULT=2 IF INFORMATION MATRIX IS NOT POSITIVE
!                           SEMI-DEFINITE
!                  IFAULT=3 IF NOP<1
!                  IFAULT=4 IF NLOOP<1
!                  IFAULT=0 OTHERWISE
!
!
!     F,STEP,NOP,IPRINT,STOPCR,NLOOP,IQUAD AND SIMP (SEE ** BELOW)
!     MUST BE SET BY THE CALLING PROGRAM
!
!
! **  IF IQUAD = 0 , SIMP IS NOT USED
!
!     F,STEP ( AND VAR IF IQUAD = 1 ) MUST HAVE DIMENSION AT LEAST NOP
!     IN THE CALLING PROGRAM
!
!   AS THE PROGRAM IS CURRENTLY SET UP, IT WILL DEAL WITH UP TO 4
!   PARAMETERS
!
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION F(*),STEP(*)
      DIMENSION G(101,100),H(101),PBAR(100),PSTAR(100),PSTST(100)
      DIMENSION AVAL(100),BMAT(1000),PMIN(100),VC(1000),VAR(*),TEMP(100)
      EQUIVALENCE(PMIN(1),PSTAR(1)),(AVAL(1),PBAR(1))
!
!     A IS REFLECTION COEFFICIENT, B IS CONTRACTION COEFFICIENT, AND
!     C IS EXPANSION COEFFICIENT
      A=1.0D0
      B=0.5D0
      C=2.0D0
!
!     IF PROGRESS REPORTS DESIRED, PRINT HEADING FOR THEM
      IF(IPRINT)5,5,55
   55 WRITE(IW,100)IPRINT
  100 FORMAT(22H PROGRESS REPORT EVERY,I4,21H FUNCTION EVALUATIONS//24HEVAL. NO.  FUNC. VALUE ,10X,10HPARAMETERS)
!
    5 IFAULT = 0
      IF(NOP.LE.0) IFAULT=3
      IF(NLOOP.LE.0) IFAULT = 4
      IF (IFAULT.NE.0) RETURN
!
!     NAP IS THE NUMBER OF PARAMETERS TO BE VARIED,I.E. WITH STEP NOT 0.
      NAP=0
      LOOP=0
      IFLAG=0
      DO 1 I=1,NOP
      IF(STEP(I).NE.0.0D0) NAP=NAP+1
    1 CONTINUE
!
!     IF NAP=0 EVALUATE FUNCTION AT STARTING POINT AND RETURN
      IF(NAP)3,4,3
    4 CALL FUNCTN (F,FUNC)
      RETURN
!
!     SET UP INITIAL SIMPLEX
    3 DO 6 I=1,NOP
    6 G(1,I)=F(I)
      IROW=2
      DO 7 I=1,NOP
      IF(STEP(I).EQ.0.0D0) GO TO 7
      DO 9 J = 1,NOP
    9 G(IROW,J)=F(J)
      G(IROW,I)=G(IROW,I)+STEP(I)
      IROW=IROW+1
    7 CONTINUE
      NP1=NAP+1
      NEVAL=0
      DO 10 I=1,NP1
      DO 11 J=1,NOP
   11 F(J)=G(I,J)
      CALL FUNCTN(F,H(I))
      NEVAL=NEVAL+1
!
!     ALL POINTS OF THE INITIAL SIMPLEX ARE OUTPUT IF IPRINT> 0
      IF(IPRINT)10,10,12
   12 WRITE(IW,101)NEVAL,H(I),(F(J),J=1,NOP)
  101 FORMAT(3X,I4,3X,7G14.6/(24X,6G14.6))
   10 CONTINUE
!
!     NOW FOLLOWS THE BASIC LOOP, I.E. GIVEN A SIMPLEX, TO DETERMINE
!     NEW SIMPLEX AND TEST FOR CONVERGENCE AS REQUIRED (FOLLOWING THE
!     FLOW CHART GIVEN IN NELDER AND MEAD)
!
!     TO STATEMENT 13 , DETERMINE MAXIMUM AND MINIMUM POINTS OF
!     CURRENT SIMPLEX (FUNCTION VALUES ARE HMAX AND HMIN)
   45 LOOP=LOOP+1
      IMAX=1
      IMIN=1
      DO 13 I=2,NP1
      IF(H(I)-H(IMAX))15,15,14
   14 IMAX=I
   15 IF(H(I)-H(IMIN))16,13,13
   16 IMIN = I
   13 CONTINUE
      HMAX = H(IMAX)
      HMIN = H(IMIN)
!
!     TO STATEMENT 18 , FIND CENTROID OF ALL VERTICES, EXCLUDING THE
!     MAXIMUM
      DO 17 I=1,NOP
   17 PBAR(I)=0.0D0
      DO 18 I=1,NP1
      IF(I-IMAX)19,18,19
   19 DO 20 J=1,NOP
   20 PBAR(J) = PBAR(J)+G(I,J)
   18 CONTINUE
      DO 602 J=1,NOP
  602 PBAR(J) = PBAR(J)/NAP
!
!     REFLECT MAXIMUM THROUGH PBAR TO PSTAR, AND EVALUATE FUNCTION AT
!     PSTAR (GIVING HSTAR)
      DO 21 I=1,NOP
   21 PSTAR(I)=A*(PBAR(I)-G(IMAX,I))+PBAR(I)
      CALL FUNCTN (PSTAR,HSTAR)
!
!     NEXT 3 STATEMENTS TEST IF PROGRESS REPORT IS REQUIRED AT PRESENT,
!     AND IF SO, PROVIDE ONE
!     THIS PROCEDURE OCCURS FREQUENTLY IN THE PROGRAM
      NEVAL=NEVAL+1
      IF(IPRINT)57,57,56
   56 IF(MOD(NEVAL,IPRINT).EQ.0) WRITE(IW,101)NEVAL,HSTAR,(PSTAR(J),J=1,NOP)
   57 IF(HSTAR-HMIN)22,23,23
!
!     IF HSTAR LESS THAN HMIN REFLECT PBAR THROUGH PSTAR TO GIVE PSTST,
!     AND EVALUATE FUNCTION THERE (GIVING HSTST)
   22 DO 24 I=1,NOP
   24 PSTST(I)=C*(PSTAR(I)-PBAR(I))+PBAR(I)
      CALL FUNCTN (PSTST,HSTST)
      NEVAL=NEVAL+1
      IF(IPRINT)60,60,59
   59 IF(MOD(NEVAL,IPRINT).EQ.0) WRITE(IW,101)NEVAL,HSTST,(PSTST(J),J=1,NOP)
   60 IF(HSTST-HMIN)25,26,26
!
!     IF HSTST LESS THAN HMIN REPLACE MAXIMUM POINT OF CURRENT SIMPLEX
!     BY PSTST AND HMAX BY HSTAR, THEN TEST (STATEMENT 26 ONWARD)
   25 DO 27 I=1,NOP
      IF(STEP(I).NE.0.0D0) G(IMAX,I)=PSTST(I)
   27 CONTINUE
      H(IMAX)=HSTST
      GO TO 41
!
!     IF HSTAR NOT LESS THAN HMIN, TEST IF HSTAR GREATER THAN FUNCTION
!     VALUE AT ALL VERTICES OTHER THAN MAXIMUM ONE
   23 DO 28 I=1,NP1
      IF(I-IMAX)29,28,29
   29 IF(HSTAR-H(I))26,28,28
   28 CONTINUE
!
!     IF IT IS LESS THAN (AT LEAST) ONE OF THE VERTICES, REPLACE MAXIMUM
!     POINT OF CURRENT SIMPLEX BY PSTAR AND HMAX BY HSTAR, THEN TEST
!     (STATEMENT 26 ONWARD)
!
!     IF HSTAR GREATER THAN ALL FUNCTION VALUES EXCLUDING THE MAXIMUM,
!     TEST IF HSTAR GREATER THAN HMAX
!     IF NOT, REPLACE MAXIMUM POINT BY PSTAR AND HMAX BY HSTAR FOR
!     WHICHEVER SIMPLEX NOW IN STORE (I.E. DEPENDING ON WHETHER HSTAR
!     WAS GREATER OR LESS THAN HMAX), CALCULATE THE CONTRACTED POINT
!     PSTST AND THE FUNCTION VALUE THERE, HSTST
      IF(HSTAR-HMAX)30,30,31
   30 DO 32 I=1,NOP
      IF(STEP(I).NE.0.0D0) G(IMAX,I)=PSTAR(I)
   32 CONTINUE
      HMAX=HSTAR
      H(IMAX)=HSTAR
   31 DO 33 I=1,NOP
   33 PSTST(I)=B*G(IMAX,I)+(1.0D0-B)*PBAR(I)
      CALL FUNCTN(PSTST,HSTST)
      NEVAL=NEVAL+1
      IF(IPRINT) 63,63,62
   62 IF(MOD(NEVAL,IPRINT).EQ.0) WRITE(IW,101)NEVAL,HSTST,(PSTST(J),J=1,NOP)
   63 IF(HSTST-HMAX)35,35,34
!
!     IF HSTST LESS THAN HMAX, REPLACE MAXIMUM POINT BY PSTST AND HMAX
!     BY HSTST, THEN TEST (STATEMENT 41 ONWARD)
   35 DO 36 I=1,NOP
      IF(STEP(I).NE.0.0D0) G(IMAX,I)=PSTST(I)
   36 CONTINUE
      H(IMAX)=HSTST
      GO TO 41
!
!     IF HSTST NOT LESS THAN HMAX, REPLACE EACH POINT OF THE CURRENT
!     SIMPLEX BY A POINT MIDWAY BETWEEN ITS CURRENT POSITION AND THE
!     POSITION OF THE MINIMUM POINT OF THE CURRENT SIMPLEX. EVALUATE
!     FUNCTION AT EACH NEW VERTEX THEN TEST (STATEMENT 41 ONWARD)
   34 DO 38 I=1,NP1
      IF(I.EQ.IMIN) GO TO 38
      DO 39 J=1,NOP
      IF(STEP(J).NE.0.0D0) G(I,J)=(G(I,J)+G(IMIN,J))/2.0D0
   39 F(J) = G(I,J)
      CALL FUNCTN (F,H(I))
      NEVAL=NEVAL+1
      IF(IPRINT)38,38,65
   65 IF(MOD(NEVAL,IPRINT).EQ.0)WRITE(IW,101)NEVAL,H(I),(F(J),J=1,NOP)
   38 CONTINUE
      GO TO 41
   26 DO 40 I=1,NOP
      IF(STEP(I).NE.0.0D0) G(IMAX,I)=PSTAR(I)
   40 CONTINUE
      H(IMAX)=HSTAR
!
!     IF LOOP = NLOOP, BEGIN TESTS FOR CONVERGENCE
!     OTHERWISE, GO BACK TO BEGINNING OF BASIC LOOP
   41 IF(LOOP-NLOOP)45,46,45
!
!     TEST FOR CONVERGENCE
!     CALCULATE MEAN AND STANDARD DEVIATION OF FUNCTION VALUES OF
!     CURRENT SIMPLEX
   46 HSTD=0.0D0
      HMEAN=0.0D0
      DO 42 I=1,NP1
   42 HMEAN=HMEAN+H(I)
      HMEAN=HMEAN/NP1
      DO 601 I=1,NP1
  601 HSTD = HSTD+(H(I)-HMEAN)**2
      HSTD = DSQRT(HSTD/NP1)
!
!     CALCULATE CENTROID OF CURRENT SIMPLEX, F, AND FUNCTION VALUE
!     THERE, FUNC
      DO 53 I=1,NOP
      IF(STEP(I).EQ.0.0D0) GO TO 53
      F(I)=0.0D0
      DO 54 J=1,NP1
   54 F(I)=F(I)+G(J,I)
      F(I)=F(I)/NP1
   53 CONTINUE
      CALL FUNCTN (F,FUNC)
      NEVAL=NEVAL+1
      IF(IPRINT.LE.0) GO TO 700
      IF(MOD(NEVAL,IPRINT).EQ.0)WRITE(IW,101)NEVAL,FUNC,(F(J),J=1,NOP)
!
!     IF NUMBER OF FUNCTION EVALUATIONS TO DATE HAS OVERRUN THE LIMIT
!     SET (MAX), SET IFAULT = 1 AND RETURN
  700 IF(NEVAL-MAX) 44,44,43
   43 IF(IPRINT)68,67,67
   67 WRITE(IW,102)MAX
  102 FORMAT(40H NUMBER OF FUNCTION EVALUATIONS EXCEEDS ,I4)
      WRITE(IW,103)HSTD
  103 FORMAT(51H STANDARD ERROR OF FUNCTION VALUES OF LAST SIMPLEX ,G13.6)
      WRITE(IW,104)(F(I),I=1,NOP)
  104 FORMAT(27H CENTROID OF LAST SIMPLEX  ,6G14.6/(28X,6G14.6))
      WRITE(IW,105)FUNC
  105 FORMAT(31H  FUNCTION VALUE AT CENTROID   ,G13.6)
   68 IFAULT = 1
      RETURN
   44 IF(HSTD-STOPCR)72,48,48
!
!     IF THE STANDARD DEVIATION CALCULATED ABOVE IS NOT LESS THAN THE
!     CRITERION (STOPCR), SET IFLAG AND LOOP TO ZERO AND BEGIN BASIC
!     LOOP AGAIN
   48 IFLAG=0
      LOOP=0
      GO TO 45
   72 IF(IPRINT)47,70,70
   70 WRITE(IW,106)
  106 FORMAT(2H */33H  INITIAL EVIDENCE OF CONVERGENCE)
      WRITE(IW,104)(F(I),I=1,NOP)
      WRITE(IW,105)FUNC
!
!     IF THE STANDARD DEVIATION IS LESS THAN THE CRITERION TEST IFLAG
!     IFLAG=0 THERE WAS NO EVIDENCE OF CONVERGENCE ON LAST TEST
!     IFLAG=1 THERE WAS EVIDENCE OF CONVERGENCE ON LAST TEST
   47 IF(IFLAG)49,50,49
!
!     IF IFLAG=0, SET IFLAG=1 AND SAVE MEAN OF FUNCTION VALUES OF
!     CURRENT SIMPLEX. GO TO BEGINNING OF BASIC LOOP.
   50 IFLAG=1
   51 SAVEMN = HMEAN
      LOOP=0
      GO TO 45
!
!     IF IFLAG=1, TEST IF CHANGE IN MEAN IS LESS THAN THE CRITERION
!     (STOPCR). IF IT IS, PROCESS HAS CONVERGED
   49 IF(DABS(SAVEMN-HMEAN).GE.STOPCR)GO TO 51
      IF(IPRINT)74,73,73
   73 WRITE(IW,107)NEVAL
  107 FORMAT(5(/),36H PROCESS CONVERGES ON MINIMUM AFTER ,I4,21H FUNCTION EVALUATIONS///)
      WRITE(IW,108)(F(I),I=1,NOP)
  108 FORMAT(14H MINIMUM AT   ,6G14.6/(14X,6G14.6))
      WRITE(IW,109)FUNC
  109 FORMAT(//26H MINIMUM FUNCTION VALUE   ,G13.6)
      WRITE(IW,110)
  110 FORMAT(///16H END  OF  SEARCH/1X,15(1H*))
   74 CONTINUE
!
!
!***********************************************************************
!
!
!     IF THE USER DOES NOT REQUIRE THE FITTING OF A QUADRATIC
!     SURFACE IN THE REGION OF THE MINIMUM ( FOR ESTIMATION
!     OF THE VARIANCE - COVARIANCE MATRIX), THE REMAINDER OF
!     THE PROGRAM DECK (INCLUDING AND AFTER THE CARD OF ***S)
!     MAY BE DETACHED. AN END CARD MUST BE INCLUDED IN THE
!     SHORTENED DECK .
!
      IF(IQUAD)200,75,200
   75 RETURN
  200 IF(IPRINT)233,232,232
  232 WRITE(IW,301)
  301 FORMAT(1H1,10(/),' FITTING OF QUADRATIC SURFACE IN REGION OF MINIMUM'///)
!
!     THE FITTING OF THE QUADRATIC SURFACE FOLLOWS EXACTLY THE
!     PROCEDURE OUTLINED BY NELDER AND MEAD , AND WHERE
!     POSSIBLE THE NOTATION IN THE COMMENT CARDS WILL CORRESPOND
!     TO THAT OF NELDER AND MEAD
  233 NEVAL=0
!
!     FURTHER FUNCTION EVALUATIONS REQUIRED ARE COUNTED IN NEVAL
!
!     THE FINAL SIMPLEX IS EXPANDED TO OVERCOME ROUNDING ERRORS
      DO 201 I=1,NP1
  204 TEST=DABS(H(I)-FUNC)
      IF(TEST-SIMP)202,201,201
  202 DO 203 J=1,NOP
      IF(STEP(J).NE.0.0D0) G(I,J)=(G(I,J)-F(J))+G(I,J)
  203 PSTST(J)=G(I,J)
      CALL FUNCTN(PSTST,H(I))
      NEVAL=NEVAL+1
      GO TO 204
  201 CONTINUE
      A0 = H(1)
!
!     THE FUNCTION VALUES Y0(I) ARE CALCULATED AND STORED IN AVAL
      DO 205 I=1,NAP
      I1=I+1
      DO 206 J=1,NOP
  206 PSTAR(J)=(G(1,J)+G(I1,J))/2.0D0
      CALL FUNCTN(PSTAR,AVAL(I))
      NEVAL=NEVAL+1
  205 CONTINUE
!
!     THE MATRIX B(I,J) IS CALCULATED , AND THE LOWER DIAGONAL SECTION
!     STORED IN THE VECTOR BMAT
!     BMAT CONTAINS THE INFORMATION MATRIX
      DO 207 I=1,NAP
      I1=I-1
      I2=I+1
      IF(I1.LT.1) GOTO 207
      DO 208 J=1,I1
      J1=J+1
      DO 209 K=1,NOP
  209 PSTST(K)=(G(I2,K)+G(J1,K))/2.0D0
      CALL FUNCTN(PSTST,HSTST)
      NEVAL=NEVAL+1
      L=I*(I-1)/2+J
      BMAT(L)=2.0D0*(HSTST+A0-AVAL(I)-AVAL(J))
  208 CONTINUE
  207 CONTINUE
      L=0
      DO 210 I=1,NAP
      I1=I+1
      L=L+I
      BMAT(L)=2.0D0*(H(I1)+A0-2.0D0*AVAL(I))
  210 CONTINUE
!
!     THE VECTOR A(I) IS CALCULATED , AND STORED IN AVAL
      DO 237 I=1,NAP
      I1=I+1
  237 AVAL(I)=2.0D0*AVAL(I)-(H(I1)+3.0D0*A0)/2.0D0
!
!     THE MATRIX Q IS CALCULATED , AND STORED IN THE MATRIX G
!     (IN FACT , CONSIDERING THE USUAL ORIENTATION OF ROWS AND COLUMNS,
!     TRANS(Q) IS STORED IN G)
      DO 219 I=1,NOP
  219 PMIN(I)=G(1,I)
      DO 211 I=1,NAP
      I1=I+1
      DO 211 J=1,NOP
      G(I1,J)=G(I1,J)-G(1,J)
  211 CONTINUE
      DO 212 I=1,NAP
      I1=I+1
      DO 212 J=1,NOP
      G(I,J)=G(I1,J)
  212 CONTINUE
!
      CALL SYMINV (BMAT,NAP,BMAT,TEMP,NULLTY,IFAULT,RMAX)
      IF(IFAULT.NE.0) GO TO 450
      IRANK = NAP-NULLTY
      GO TO 441
  450 IF(IPRINT.GE.0) WRITE(IW,302)
  302 FORMAT(49H MATRIX TO BE INVERTED NOT POSITIVE SEMI-DEFINITE)
      IFAULT = 2
      RETURN
!
!     (B**-1)*A*0.5 IS CALCULATED,AND STORED IN H
  441 DO 213 I=1,NAP
      H(I)=0.0D0
      DO 214 J=1,NAP
      IF(J-I)216,216,215
  216 IJ=I*(I-1)/2+J
      GO TO 217
  215 IJ=J*(J-1)/2+I
  217 H(I)=H(I)+BMAT(IJ)*AVAL(J)
  214 CONTINUE
  213 CONTINUE
!
!     YMIN (THE ESTIMATED MINIMUM VALUE) AND PMIN (ITS POSITION)
!     ARE CALCULATED
      YMIN=0
      DO 218 I=1,NAP
  218 YMIN=YMIN+H(I)*AVAL(I)
      YMIN=A0-YMIN
      DO 220 I=1,NOP
      PSTST(I)=0
      DO 220 J=1,NAP
  220 PSTST(I)=PSTST(I)+H(J)*G(J,I)
      DO 221 I=1,NOP
  221 PMIN(I)=PMIN(I)-PSTST(I)
      IF(IPRINT)223,222,222
  222 WRITE(IW,303)YMIN,(PMIN(I),I=1,NOP)
  303 FORMAT(42H MINIMUM OF FITTED QUADRATIC SURFACE IS   ,G13.6,4H  AT/(6G14.6))
      WRITE(IW,304)FUNC,(F(I),I=1,NOP)
  304 FORMAT(/42H COMPARE WITH MINIMUM FOUND BY ITERATION  ,G13.6,4H  AT/(6G14.6))
      WRITE(IW,305)
  305 FORMAT(/58H IF DIFFERENCE IS LARGE , INFORMATION MATRIX IS INACCURATE///)
!
!     Q*(B**-1)*TRANS(Q)*0.5 IS CALCULATED,AND ITS LOWER DIAGONAL
!     SECTION STORED IN THE VECTOR VC
  223 DO 224 I=1,NOP
      DO 225 J=1,NAP
      H(J)=0.0D0
      DO 226 K=1,NAP
      IF(K-J)227,227,228
  227 JK=J*(J-1)/2+K
      GO TO 229
  228 JK=K*(K-1)/2+J
  229 H(J) = H(J)+BMAT(JK)*G(K,I)*0.5D0
  226 CONTINUE
  225 CONTINUE
      DO 230 J=I,NOP
      IJ = J*(J-1)/2+I
      VC(IJ)=0.0D0
      DO 231 K=1,NAP
  231 VC(IJ)=VC(IJ)+H(K)*G(K,J)
  230 CONTINUE
  224 CONTINUE
!
!     THE DIAGONAL ELEMENTS OF VC ARE STORED IN VAR FOR RETURN TO THE
!     CALLING PROGRAMME
      J = 0
      DO 234 I=1,NOP
      J = J+I
  234 VAR(I)=VC(J)
      IF(IPRINT)235,236,236
  236 WRITE(IW,306)IRANK
  306 FORMAT(28H INFORMATION MATRIX HAS RANK,I3//42H GENERALIZED INVERSE OF INFORMATION MATRIX/)
      IJK=1
      GO TO 710
  717 CONTINUE
      WRITE(IW,308)
  308 FORMAT(///113H IF THE FUNCTION MINIMISED WAS -LOG(LIKELIHOOD) , THIS MATRIX IS THE VARIANCE-COVARIANCE MATRIX OF THE PARAMETERS/)
      WRITE(IW,309)
  309 FORMAT(120H IF THE FUNCTION MINIMISED WAS THE SUM OF SQUARES OF RESIDUALS , THIS MATRIX MUST BE MULTIPLIED BY TWICE THE ESTIMATE OF/79H THE RESIDUAL VARIANCE TO GIVE THE VARIANCE-COVARIANCE MATRIXOF THE PARAMETERS///)
      CALL SYMINV (VC,NAP,BMAT,TEMP,NULLTY,IFAULT,RMAX)
!
!     BMAT NOW CONTAINS THE INFORMATION MATRIX
!
!     PRINTING OUT THE INFORMATION MATRIX
      WRITE(IW,320)
  320 FORMAT(19H INFORMATION MATRIX/)
      IJK=3
      GO TO 710
  711 IJK=2
      II = 0
      IJ = 0
      DO 701 I = 1,NOP
      II = II+I
      IF(VC(II).LE.0.0D0) GO TO 702
      VC(II) = 1.0D0/DSQRT(VC(II))
      GO TO 703
  702 VC(II) = 0.0D0
  703 IF(I.EQ.1) GO TO 701
      IM1 = I-1
      JJ = 0
      DO 705 J=1,IM1
      JJ = JJ+J
      IJ = IJ+1
  705 VC(IJ) = VC(IJ)*VC(II)*VC(JJ)
  701 IJ = IJ+1
      WRITE(IW,312)
  312 FORMAT(///19H CORRELATION MATRIX/)
      II = 0
      DO 706 I=1,NOP
      II = II+I
      IF(VC(II).NE.0.0D0) VC(II) =1.0D0
  706 CONTINUE
      GO TO 710
  712 WRITE(IW,310)NEVAL
  310 FORMAT(11H A FURTHER ,I4,36H FUNCTION EVALUATIONS HAVE BEEN USED///)
      WRITE(IW,311)
  311 FORMAT(37H END  OF  QUADRATIC  SURFACE  FITTING/1X,36(1H*))
  235 RETURN
  710 L=1
  716 IF(L.GT.NOP) GO TO (717,712,711),IJK
      II=L*(L-1)/2
      DO 713 I=L,NOP
      I1 = II+L
      II=II+I
      I2=MIN0(II,I1+5)
      IF(IJK.EQ.3) GO TO 718
      WRITE(IW,714)(VC(J),J=I1,I2)
      GO TO 713
  718 WRITE(IW,714)(BMAT(J),J=I1,I2)
  713 CONTINUE
  714 FORMAT(15X,6G14.6)
      WRITE(IW,715)
  715 FORMAT(1H0)
      L=L+6
      GO TO 716
      END
      SUBROUTINE SYMINV (A,N,C,W,NULLTY,IFAULT,RMAX)
!
!     ALGORITHM AS 7 J.R.STATIST.SOC. C, (1968) VOL.17, NO.2.
!
!     FORMS IN C( ) AS LOWER TRIANGLE, A GENERALISED INVERSE
!     OF THE POSITIVE SEMI-DEFINITE SYMMETRIC MATRIX A( )
!     ORDER N, STORED AS LOWER TRIANGLE.
!     C( ) MAY COINCIDE WITH A( ) . NULLTY IS RETURNED AS THE NULLITY
!     OF A( ). IFAULT IS RETURNED AS 1 IF N.LT.1, OTHERWISE ZERO
!     W( ) IS A WORK ARRAY OF LENGTH AT LEAST N THAT IS ALLOCATED BY
!     THE CALLING ROUTINE
!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(1),C(1),W(1)
!
      NROW=N
      IFAULT=1
      IF(NROW.LE.0) GO TO 100
      IFAULT=0
      CALL CHOLA(A,NROW,C,NULLTY,IFAULT,RMAX,W)
      IF(IFAULT.NE.0) GO TO 100
      NN=(NROW*(NROW+1))/2
      IROW=NROW
      NDIAG=NN
   16 IF(C(NDIAG).EQ.0.0D0) GO TO 11
      L=NDIAG
      DO 10 I=IROW,NROW
      W(I)=C(L)
      L=L+I
   10 CONTINUE
      ICOL=NROW
      JCOL=NN
      MDIAG=NN
   15 L=JCOL
      X=0.0D0
      IF(ICOL.EQ.IROW) X=1.0D0/W(IROW)
      K=NROW
   13 IF(K.EQ.IROW) GO TO 12
      X=X-W(K)*C(L)
      K=K-1
      L=L-1
      IF(L.GT.MDIAG) L=L-K+1
      GO TO 13
   12 C(L)=X/W(IROW)
      IF(ICOL.EQ.IROW) GO TO 14
      MDIAG=MDIAG-ICOL
      ICOL=ICOL-1
      JCOL=JCOL-1
      GO TO 15
   11 L=NDIAG
      DO 17 J=IROW,NROW
      C(L)=0.0D0
      L=L+J
   17 CONTINUE
   14 NDIAG=NDIAG-IROW
      IROW=IROW-1
      IF(IROW.NE.0) GO TO 16
  100 RETURN
      END
      SUBROUTINE CHOLA(A,N,U,NULLTY,IFAULT,RMAX,R)
!
!     ALGORITHM AS 6 J.R.STATIST.SOC. C, (1968) VOL.17 , NO.2
!
!     GIVEN A SYMMETRIC MATRIX ORDER N AS LOWER TRIANGLE IN A( ),
!     CALCULATES AN UPPER TRIANGLE, U( ) , SUCH THAT UPRIME*U = A.
!     U( ) MAY COINCIDE WITH A( ). A( ) MUST BE POSITIVE SEMI-
!     DEFINITE.
!     ETA IS SET TO MULTIPLYING FACTOR DETERMINING EFFECTIVE
!     ZERO FOR PIVOT.
!     NULLTY IS RETURNED AS NO. OF EFFECTIVE ZERO PIVOTS.
!     IFAULT IS RETURNED AS 1 IF N.LE.0, 2 IF A( ) IS NOT POSITIVE
!     SEMI-DEFINITE WITHIN THE TOLERANCE DEFINED BY ETA, OTHERWISE
!     ZERO.
!
!
!     CORRECTION ASR12 J.R.STATIST.SOC.C.(1974) ADDED
!
!     MODIFIED TEST FOR A SINGULARITY AND ACCURACY ESTIMATE BY
!     A.J.MILLER ADDED
!
!
      IMPLICIT REAL*8 (A-H,O-Z)
      DIMENSION A(1),U(1),R(1)
!
      ETA=1.0D-24
!
!     THE VALUE OF ETA WILL DEPEND ON THE WORD LENGTH OF THE
!     COMPUTER BEING USED
!
!
      IFAULT=1
      IF(N.LE.0) GO TO 100
      IFAULT=2
      NULLTY=0
      RMAX = ETA
      R(1) = ETA
      J=1
      K=0
      DO 10 ICOL=1,N
      L=0
      DO 11 IROW=1,ICOL
      K=K+1
      W=A(K)
      IF(IROW.EQ.ICOL) RSQ = (W*ETA)**2
      M=J
      DO 12 I=1,IROW
      L=L+1
      IF(I.EQ.IROW) GO TO 13
      W=W-U(L)*U(M)
      IF(IROW.EQ.ICOL) RSQ = RSQ + (U(L)**2*R(I))**2
      M=M+1
   12 CONTINUE
   13 IF(IROW.EQ.ICOL) GO TO 14
      IF(U(L).EQ.0.0D0) GO TO 21
      U(K)=W/U(L)
      GO TO 11
   21 U(K)=0.0D0
      IF(DABS(W).GT.DABS(RMAX*A(K))) GO TO 100
   11 CONTINUE
   14 RSQ = DSQRT(RSQ)
      IF(DABS(W).LE.5.D0*RSQ) GO TO 20
      IF(W.LT.0.0D0) GO TO 100
      U(K)=DSQRT(W)
      R(I) = RSQ/W
      IF(R(I).GT.RMAX) RMAX = R(I)
      GO TO 15
   20 U(K)=0.0D0
      NULLTY=NULLTY+1
   15 J=J+ICOL
   10 CONTINUE
      IFAULT=0
  100 RETURN
      END

